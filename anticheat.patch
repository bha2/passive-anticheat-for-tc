diff -r 9bbeba59a2ec src/server/game/Chat/Chat.cpp
--- a/src/server/game/Chat/Chat.cpp     Sun Oct 31 22:37:54 2010 +0100
+++ b/src/server/game/Chat/Chat.cpp     Sun Oct 31 19:38:02 2010 -0300
@@ -802,6 +802,7 @@
         { "bindsight",      SEC_ADMINISTRATOR,  false, &ChatHandler::HandleBindSightCommand,           "", NULL },
         { "unbindsight",    SEC_ADMINISTRATOR,  false, &ChatHandler::HandleUnbindSightCommand,         "", NULL },
         { "playall",        SEC_GAMEMASTER,  false, &ChatHandler::HandlePlayAllCommand,             "", NULL },
+        { "anticheat",      SEC_GAMEMASTER,     false, &ChatHandler::HandleAntiCheatCommand,        "", NULL },
         { NULL,             0,                  false, NULL,                                           "", NULL }
     };
 
diff -r 9bbeba59a2ec src/server/game/Chat/Chat.h
--- a/src/server/game/Chat/Chat.h       Sun Oct 31 22:37:54 2010 +0100
+++ b/src/server/game/Chat/Chat.h       Sun Oct 31 19:38:02 2010 -0300
@@ -607,6 +607,8 @@
         bool HandleTempGameObjectCommand(const char* args);
         bool HandleTempAddSpwCommand(const char* args);
 
+        bool HandleAntiCheatCommand(const char* args);
+
         //! Development Commands
 
         /*bool HandleQuestAdd(const char * args);
diff -r 9bbeba59a2ec src/server/game/Chat/Commands/Level3.cpp
--- a/src/server/game/Chat/Commands/Level3.cpp  Sun Oct 31 22:37:54 2010 +0100
+++ b/src/server/game/Chat/Commands/Level3.cpp  Sun Oct 31 19:38:02 2010 -0300
@@ -7408,6 +7408,28 @@
     return true;
 }
 
+bool ChatHandler::HandleAntiCheatCommand(const char *args)
+{
+    PreparedStatement* stmt = CharacterDatabase.GetPreparedStatement(CHAR_ANTICHEAT_GET_CHEATERS);
+    PreparedQueryResult result = CharacterDatabase.Query(stmt);
+
+    if (result)
+    {
+        do
+        {
+            Field* fields=result->Fetch();
+            std::string name = fields[0].GetCString();
+            uint32 warnings = fields[1].GetUInt32();
+
+            PSendSysMessage("Name: %s Warnings: %u", name.c_str(), warnings);
+        }
+        while (result->NextRow());
+    } else
+        PSendSysMessage("Cheaters log empty!.");
+
+    return true;
+}
+
 bool ChatHandler::HandleFreezeCommand(const char *args)
 {
     std::string name;
diff -r 9bbeba59a2ec src/server/game/Entities/Player/Player.cpp
--- a/src/server/game/Entities/Player/Player.cpp        Sun Oct 31 22:37:54 2010 +0100
+++ b/src/server/game/Entities/Player/Player.cpp        Sun Oct 31 19:38:02 2010 -0300
@@ -654,6 +654,42 @@
     sWorld.DecreasePlayerCount();
 }
 
+void Player::ElaborateCheatReport(Player* pPlayer, uint8 uiCheatType)
+{
+    if (!pPlayer)
+        return;
+
+    // cheatType 1 == SpeedHack
+    // cheatType 2 == FlyHack
+
+    std::string strReportType;
+
+    switch(uiCheatType)
+    {
+    case 1:
+        strReportType = "Speed-Hack";
+        break;
+    case 2:
+        strReportType = "Fly-Hack"; 
+        break;
+    default:
+        strReportType = "";
+        break;
+    }
+    
+    PreparedStatement* stmt = CharacterDatabase.GetPreparedStatement(CHAR_ANTICHEAT_SET_CHEATERS);
+    stmt->setUInt64(0,GetGUIDLow());
+    stmt->setString(1,GetName());
+    stmt->setUInt32(2,GetMapId());
+    stmt->setFloat(3,GetPositionX());
+    stmt->setFloat(4,GetPositionY());
+    stmt->setFloat(5,GetPositionZ());
+    std::ostringstream ss;
+    ss << strReportType << " " << TimeToTimestampStr(sWorld.GetGameTime());
+    stmt->setString(6,ss.str());
+    CharacterDatabase.Execute(stmt);
+}
+
 void Player::CleanupsBeforeDelete(bool finalCleanup)
 {
     TradeCancel(false);
@@ -20061,6 +20097,21 @@
     }
 }
 
+bool Player::CanFlyAnticheat(MovementInfo& pMovementInfo)
+{
+    if (HasAuraType(SPELL_AURA_FLY) || HasAuraType(SPELL_AURA_WATER_WALK) || HasAuraType(SPELL_AURA_MOD_INCREASE_MOUNTED_FLIGHT_SPEED) || HasAuraType(SPELL_AURA_MOD_INCREASE_FLIGHT_SPEED))
+        return true;
+
+    if (Creature* pCreature = GetVehicleCreatureBase())
+        if (pCreature->GetCreatureInfo()->InhabitType & INHABIT_AIR)
+            return true;
+
+    if (HasUnitMovementFlag(MOVEMENTFLAG_JUMPING) ||  pMovementInfo.HasMovementFlag(MOVEMENTFLAG_JUMPING) || GetMap()->GetGameObject(pMovementInfo.t_guid))
+        return true;
+
+    return false;
+}
+
 void Player::UpdatePvPState(bool onlyFFA)
 {
     // TODO: should we always synchronize UNIT_FIELD_BYTES_2, 1 of controller and controlled?
diff -r 9bbeba59a2ec src/server/game/Entities/Player/Player.h
--- a/src/server/game/Entities/Player/Player.h  Sun Oct 31 22:37:54 2010 +0100
+++ b/src/server/game/Entities/Player/Player.h  Sun Oct 31 19:38:02 2010 -0300
@@ -2383,6 +2383,15 @@
         float GetAverageItemLevel();
         bool isDebugAreaTriggers;
 
+        /*********************************************************/
+        /***                 ANTICHEAT SYSTEM                  ***/
+        /*********************************************************/
+        uint32 GetLastPacketTime() { return uiLastPacketTime;}
+        float GetLastSpeedRate() { return fLastSpeedRate; }
+        void SetLastPacketTime(uint32 uiTime) { uiLastPacketTime = uiTime; }
+        void SetLastSpeedRate(float fSpeedRateRate) { fLastSpeedRate = fSpeedRateRate; }
+        void ElaborateCheatReport(Player* pPlayer, uint8 uiReportType);
+        bool CanFlyAnticheat(MovementInfo& pMovementInfo);
     protected:
         uint32 m_AreaID;
         uint32 m_regenTimerCount;
@@ -2624,6 +2633,12 @@
         Runes *m_runes;
         EquipmentSets m_EquipmentSets;
     private:
+        /*********************************************************/
+        /***                    ANTICHEAT SYSTEM               ***/
+        /*********************************************************/
+        uint32  uiLastPacketTime;
+        float fLastSpeedRate;
+
         // internal common parts for CanStore/StoreItem functions
         uint8 _CanStoreItem_InSpecificSlot(uint8 bag, uint8 slot, ItemPosCountVec& dest, ItemPrototype const *pProto, uint32& count, bool swap, Item *pSrcItem) const;
         uint8 _CanStoreItem_InBag(uint8 bag, ItemPosCountVec& dest, ItemPrototype const *pProto, uint32& count, bool merge, bool non_specialized, Item *pSrcItem, uint8 skip_bag, uint8 skip_slot) const;
diff -r 9bbeba59a2ec src/server/game/Server/Protocol/Handlers/MovementHandler.cpp
--- a/src/server/game/Server/Protocol/Handlers/MovementHandler.cpp      Sun Oct 31 22:37:54 2010 +0100
+++ b/src/server/game/Server/Protocol/Handlers/MovementHandler.cpp      Sun Oct 31 19:38:02 2010 -0300
@@ -340,6 +340,91 @@
     }
 
     /*----------------------*/
+    
+    // ANTICHEAT CHECKS
+    if (sWorld.getBoolConfig(CONFIG_ANTICHEAT_ENABLE))
+    {
+        if (plMover && 
+            plMover->GetLastPacketTime() > 0 &&
+            movementInfo.GetMovementFlags() == plMover->GetUnitMovementFlags() && 
+            opcode == MSG_MOVE_HEARTBEAT &&
+            !plMover->IsInWater() && 
+            !plMover->isInFlight() && 
+            !plMover->GetTransport() && 
+            !plMover->GetVehicle() && 
+            !plMover->IsBeingTeleported() &&
+            plMover->CanFreeMove() &&
+            plMover->GetMotionMaster()->GetCurrentMovementGeneratorType() != TARGETED_MOTION_TYPE &&
+            !plMover->isGameMaster())
+        {
+            uint8 uiMoveType = 0;
+
+            if (plMover->IsFlying())
+                uiMoveType = MOVE_FLIGHT;
+            else
+                uiMoveType = MOVE_RUN;
+
+            // fly hack detection
+            // PosZ is checked to see if the player is going up when it should not.
+            if (!plMover->CanFlyAnticheat(movementInfo))
+            {
+                if (movementInfo.pos.GetPositionZ() > plMover->GetPositionZ() && fabs(movementInfo.pos.GetPositionZ() - plMover->GetPositionZ()) > 1.5f)
+                {
+                    float ground_Z = plMover->GetMap()->GetHeight(movementInfo.pos.GetPositionX(), movementInfo.pos.GetPositionY(), movementInfo.pos.GetPositionZ());
+                    if (movementInfo.pos.GetPositionZ() > ground_Z && fabs(movementInfo.pos.GetPositionZ() - ground_Z) >= 5.0f)
+                        plMover->ElaborateCheatReport(plMover,2);
+                }
+            }
+
+            // this is the distance doable by a player in 1000 ms.
+            float fSpeedRate = plMover->GetSpeedRate(UnitMoveType(uiMoveType));
+
+            // in my opinion this var must be constant in each check to avoid false reports
+            if (plMover->GetLastSpeedRate() == fSpeedRate)
+            {
+                // Calculate Distance2D
+                float fDeltaX = pow((movementInfo.pos.GetPositionX() - plMover->GetPositionX()),2);
+                float fDeltaY = pow(movementInfo.pos.GetPositionY() - plMover->GetPositionY(),2);
+                // final distance
+                float fDistance2d = fabs(sqrt(fDeltaX + fDeltaY) - plMover->GetObjectSize() - plMover->GetObjectSize());
+
+                // time between packets
+                uint32 uiDiffTime = getMSTimeDiff(plMover->GetLastPacketTime(),getMSTime());
+        
+                // this is the distance doable by the player in 1 sec using the time between the packets
+                float fCoreDistance = uiDiffTime * 7.0f * fSpeedRate / 1000;
+
+                /* SPEED HACK DETECTION */
+                // some times (i dont know why) fCoreDistance is 0 
+                if (fCoreDistance > 0.0f && fDistance2d > 0)
+                {
+                    // movements packet are sent every 500 ms aprox, if the uiDiffTime is less than 500 (aprox), imo it is a lag problem
+                    if (uiDiffTime < sWorld.getIntConfig(CONFIG_ANTICHEAT_MAX_DIFF_TIME) && uiDiffTime > sWorld.getIntConfig(CONFIG_ANTICHEAT_MIN_DIFF_TIME))
+                    {
+                        if (fDistance2d > fCoreDistance)
+                        {
+                            sLog.outError("Cheater! guid %u name %s fCoreDistance %f fDistance2d %f uiDiffTime %u fSpeedRate %f Latency %u",plMover->GetGUIDLow(),plMover->GetName(),fCoreDistance,fDistance2d,uiDiffTime,fSpeedRate, plMover->GetSession()->GetLatency());
+                            plMover->ElaborateCheatReport(plMover,1);
+                        }
+                    }
+                }
+            }
+        }
+
+        // save packet time for next control.
+        if (plMover)
+        {
+            uint8 uiMoveType = 0;
+
+            if (plMover->IsFlying())
+                uiMoveType = MOVE_FLIGHT;
+            else
+                uiMoveType = MOVE_RUN;
+
+            plMover->SetLastPacketTime(getMSTime());
+            plMover->SetLastSpeedRate(plMover->GetSpeedRate(UnitMoveType(uiMoveType)));
+        }
+    }
 
     /* process position-change */
     WorldPacket data(opcode, recv_data.size());
diff -r 9bbeba59a2ec src/server/game/World/World.cpp
--- a/src/server/game/World/World.cpp   Sun Oct 31 22:37:54 2010 +0100
+++ b/src/server/game/World/World.cpp   Sun Oct 31 19:38:02 2010 -0300
@@ -1214,6 +1214,11 @@
     // MySQL ping time interval
     m_int_configs[CONFIG_DB_PING_INTERVAL] = sConfig.GetIntDefault("MaxPingTime", 1800);
 
+    // anticheat configs
+    m_bool_configs[CONFIG_ANTICHEAT_ENABLE] = sConfig.GetBoolDefault("Anticheat.Enable", false);
+    m_int_configs[CONFIG_ANTICHEAT_MAX_DIFF_TIME] = sConfig.GetIntDefault("Anticheat.MaxDiffTime", 1000);
+    m_int_configs[CONFIG_ANTICHEAT_MIN_DIFF_TIME] = sConfig.GetIntDefault("Anticheat.MinDiffTime", 350);
+
     sScriptMgr.OnConfigLoad(reload);
 }
 
@@ -2690,6 +2695,9 @@
         if (itr->second->GetPlayer())
             itr->second->GetPlayer()->ResetDailyQuestStatus();
 
+    //ANTICHEAT
+    CharacterDatabase.Execute("DELETE FROM cheat_reports;");
+
     // change available dailies
     sPoolMgr.ChangeDailyQuests();
 }
diff -r 9bbeba59a2ec src/server/game/World/World.h
--- a/src/server/game/World/World.h     Sun Oct 31 22:37:54 2010 +0100
+++ b/src/server/game/World/World.h     Sun Oct 31 19:38:02 2010 -0300
@@ -161,6 +161,7 @@
     CONFIG_CHATLOG_BGROUND,
     CONFIG_DUNGEON_FINDER_ENABLE,
     CONFIG_AUTOBROADCAST,
+    CONFIG_ANTICHEAT_ENABLE,
     BOOL_CONFIG_VALUE_COUNT
 };
 
@@ -306,6 +307,8 @@
     CONFIG_AUTOBROADCAST_INTERVAL,
     CONFIG_MAX_RESULTS_LOOKUP_COMMANDS,
     CONFIG_DB_PING_INTERVAL,
+    CONFIG_ANTICHEAT_MAX_DIFF_TIME,
+    CONFIG_ANTICHEAT_MIN_DIFF_TIME,
     INT_CONFIG_VALUE_COUNT
 };
 
diff -r 9bbeba59a2ec src/server/shared/Database/Implementation/CharacterDatabase.cpp
--- a/src/server/shared/Database/Implementation/CharacterDatabase.cpp   Sun Oct 31 22:37:54 2010 +0100
+++ b/src/server/shared/Database/Implementation/CharacterDatabase.cpp   Sun Oct 31 19:38:02 2010 -0300
@@ -211,5 +211,8 @@
     PrepareStatement(CHAR_CLEAN_GUILD_BANK_TABS, "DELETE FROM guild_bank_tab WHERE guildId NOT IN (SELECT guildid FROM guild)");
     PrepareStatement(CHAR_CLEAN_GUILD_BANK_RIGHTS, "DELETE FROM guild_bank_right WHERE guildId NOT IN (SELECT guildid FROM guild)");
     PrepareStatement(CHAR_CLEAN_GUILD_BANK_ITEMS, "DELETE FROM guild_bank_item WHERE guildId NOT IN (SELECT guildid FROM guild)");
+
+    PrepareStatement(CHAR_ANTICHEAT_SET_CHEATERS, "INSERT INTO cheat_reports (`guid`,`name`,`mapid`,`position_x`,`position_y`,`position_z`,`report`) VALUES (?,?,?,?,?,?,?);");
+    PrepareStatement(CHAR_ANTICHEAT_GET_CHEATERS, "SELECT A.`name` , count( * ) AS 'Repeticiones' FROM `characters` AS A, `cheat_reports` AS B WHERE A.`online` =1 AND A.`guid` = B.`guid` GROUP BY B.`guid` ORDER BY Repeticiones DESC LIMIT 0 , 3");
     return true;
 }
diff -r 9bbeba59a2ec src/server/shared/Database/Implementation/CharacterDatabase.h
--- a/src/server/shared/Database/Implementation/CharacterDatabase.h     Sun Oct 31 22:37:54 2010 +0100
+++ b/src/server/shared/Database/Implementation/CharacterDatabase.h     Sun Oct 31 19:38:02 2010 -0300
@@ -176,6 +176,8 @@
     CHAR_CLEAN_GUILD_BANK_TABS,
     CHAR_CLEAN_GUILD_BANK_RIGHTS,
     CHAR_CLEAN_GUILD_BANK_ITEMS,
+    CHAR_ANTICHEAT_SET_CHEATERS,
+    CHAR_ANTICHEAT_GET_CHEATERS,
 
     MAX_CHARACTERDATABASE_STATEMENTS,
 };
diff -r 9bbeba59a2ec src/server/worldserver/worldserver.conf.dist
--- a/src/server/worldserver/worldserver.conf.dist      Sun Oct 31 22:37:54 2010 +0100
+++ b/src/server/worldserver/worldserver.conf.dist      Sun Oct 31 19:38:02 2010 -0300
@@ -2062,6 +2062,14 @@
 #        Default: 0 - off
 #                 1 - on
 #
+#   Anticheat.Enable
+#        Enable Anticheat System
+#        Default: 0 - off
+#                 1 - on
+#   Anticheat.MaxDiffTime
+#        Default: 1000 ms
+#   Anticheat.MinDiffTime
+#        Default: 350 ms
 ###############################################################################
 
 PlayerStart.AllReputation = 0
@@ -2085,3 +2093,6 @@
 LevelReq.Auction = 1
 LevelReq.Mail = 1
 DungeonFinder.Enable = 0
+Anticheat.Enable = 0
+Anticheat.MaxDiffTime = 1000
+Anticheat.MinDiffTime = 350