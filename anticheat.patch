diff -r 5178845b32a8 src/server/game/Chat/Chat.cpp
--- a/src/server/game/Chat/Chat.cpp	Wed Nov 17 23:24:21 2010 +0100
+++ b/src/server/game/Chat/Chat.cpp	Wed Nov 17 20:47:19 2010 -0300
@@ -350,6 +350,15 @@
         { NULL,             0,                  false, NULL,                                                "", NULL }
     };
 
+    static ChatCommand anticheatCommandTable[] =
+    {
+        { "global",         SEC_ADMINISTRATOR,     false,  OldHandler<&ChatHandler::HandleAntiCheatGlobalCommand>,         "", NULL },
+        { "player",         SEC_ADMINISTRATOR,     false,  OldHandler<&ChatHandler::HandleAntiCheatPlayerCommand>,         "", NULL },
+        { "delete",         SEC_ADMINISTRATOR,     false,  OldHandler<&ChatHandler::HandleAntiCheatDeleteCommand>,         "", NULL },
+        { "handle",         SEC_ADMINISTRATOR,     false,  OldHandler<&ChatHandler::HandleAntiCheatHandleCommand>,         "", NULL },
+        { NULL,             0,                     false, NULL,                                           "", NULL }
+    };
+
     static ChatCommand commandTable[] =
     {
         { "character",      SEC_GAMEMASTER,     true,  NULL,                                           "", characterCommandTable},
@@ -436,6 +445,7 @@
         { "bindsight",      SEC_ADMINISTRATOR,  false, OldHandler<&ChatHandler::HandleBindSightCommand>,           "", NULL },
         { "unbindsight",    SEC_ADMINISTRATOR,  false, OldHandler<&ChatHandler::HandleUnbindSightCommand>,         "", NULL },
         { "playall",        SEC_GAMEMASTER,  false, OldHandler<&ChatHandler::HandlePlayAllCommand>,             "", NULL },
+        { "anticheat",      SEC_GAMEMASTER,     false, NULL,                                        "",  anticheatCommandTable},
         { NULL,             0,                  false, NULL,                                           "", NULL }
     };
 
diff -r 5178845b32a8 src/server/game/Chat/Chat.h
--- a/src/server/game/Chat/Chat.h	Wed Nov 17 23:24:21 2010 +0100
+++ b/src/server/game/Chat/Chat.h	Wed Nov 17 20:47:19 2010 -0300
@@ -339,6 +339,12 @@
 
         bool HandleTempGameObjectCommand(const char* args);
 
+        // ANTICHEAT
+        bool HandleAntiCheatGlobalCommand(const char* args); // top3 : Amount || Average || (Amount && Average)
+        bool HandleAntiCheatPlayerCommand(const char* args); // returns especific player's average and amount
+        bool HandleAntiCheatDeleteCommand(const char* args); // if no player name as parameter, deletes all logs else deletes specific player's log
+        bool HandleAntiCheatHandleCommand(const char* args); // turn it on, turn it off 
+
         //! Development Commands
 
         /*bool HandleQuestAdd(const char * args);
diff -r 5178845b32a8 src/server/game/Chat/Commands/Level3.cpp
--- a/src/server/game/Chat/Commands/Level3.cpp	Wed Nov 17 23:24:21 2010 +0100
+++ b/src/server/game/Chat/Commands/Level3.cpp	Wed Nov 17 20:47:19 2010 -0300
@@ -4449,6 +4449,206 @@
     return true;
 }
 
+bool ChatHandler::HandleAntiCheatDeleteCommand(const char *args)
+{
+    std::string strCommand;
+
+    char* command = strtok((char*)args, " "); //get entered name
+
+    if (!command)
+        return true;
+    
+    strCommand = command;
+    
+    if (strCommand.compare("deleteall") == 0)
+    {
+        uint8 uiStmt[3] = {CHAR_ANTICHEAT_CLEAN_CHEAT_FIRST_REPORT,CHAR_ANTICHEAT_CLEAN_CHEATERS_TEMP, CHAR_ANTICHEAT_CLEAN_CHEATERS };
+        for (uint8 uiI = 0; uiI < 3; uiI++)
+        {
+            PreparedStatement* stmt = CharacterDatabase.GetPreparedStatement(uiStmt[uiI]);
+            CharacterDatabase.Execute(stmt);
+        }
+
+    } else
+    {
+        normalizePlayerName(strCommand);
+        Player* pPlayer = sObjectMgr.GetPlayer(strCommand.c_str()); //get player by name
+
+        if (!pPlayer)
+            PSendSysMessage("Player doesn't exist");
+        else
+        {
+            uint8 uiStmt[3] = {CHAR_ANTICHEAT_DEL_CHEATERS, CHAR_ANTICHEAT_DEL_CHEATERS_TEMP,CHAR_ANTICHEAT_DEL_CHEAT_FIRST_REPORT};
+
+            for (uint8 uiI = 0; uiI < 3; uiI++)
+            {
+                PreparedStatement* stmt = CharacterDatabase.GetPreparedStatement(uiStmt[uiI]);
+                stmt->setUInt64(0, pPlayer->GetGUIDLow());
+                CharacterDatabase.Execute(stmt);
+            }
+        }
+    }
+
+    return true;
+}
+
+bool ChatHandler::HandleAntiCheatPlayerCommand(const char *args)
+{
+    std::string strCommand;
+
+    char* command = strtok((char*)args, " ");
+
+    uint32 uiGUID = 0;
+    Player* pPlayer = NULL;
+    
+    if (command)
+    {
+        strCommand = command;
+
+        normalizePlayerName(strCommand);
+
+        pPlayer = sObjectMgr.GetPlayer(strCommand.c_str()); //get player by name
+
+        if (pPlayer)
+            uiGUID = pPlayer->GetGUIDLow();
+    }else 
+    {
+        pPlayer = getSelectedPlayer();
+        if (pPlayer)
+            uiGUID = pPlayer->GetGUIDLow();  
+    }
+
+    if (uiGUID == 0)
+    {
+        PSendSysMessage("There is no player.");
+        return true;
+    }
+    
+    PreparedStatement* stmt = CharacterDatabase.GetPreparedStatement(CHAR_ANTICHEAT_GET_CHEATERS_BY_GUID);
+    stmt->setUInt32(0,uiGUID);
+    PreparedQueryResult result = CharacterDatabase.Query(stmt);
+
+    if (result)
+    {
+        do
+        {
+            Field* fields=result->Fetch();
+            uint32 warnings = fields[0].GetUInt32();
+            PSendSysMessage("Amount: %u", warnings);
+        }
+        while (result->NextRow());
+    } else
+        PSendSysMessage("Player's amount log is empty!.");
+
+    stmt = CharacterDatabase.GetPreparedStatement(CHAR_ANTICHEAT_GET_CHEATERS_AVERAGE_BY_GUID);
+    stmt->setUInt32(0,uiGUID);
+    result = CharacterDatabase.Query(stmt);
+
+    if (result)
+    {
+        do
+        {
+            Field* fields=result->Fetch();
+            uint32 average = fields[0].GetUInt32();
+            uint32 warnings = fields[1].GetUInt32();
+
+            PSendSysMessage("Average: %u Warnings: %u", average, warnings);
+        }
+        while (result->NextRow());
+    } else
+        PSendSysMessage("Player's average log is empty!.");
+
+
+    stmt = CharacterDatabase.GetPreparedStatement(CHAR_ANTICHEAT_GET_REPORTS_TYPE_BY_GUID);
+    stmt->setUInt32(0,uiGUID);
+    result = CharacterDatabase.Query(stmt);
+    
+    uint32 uiReportsAmount[3] = {0,0,0};
+
+    if (result)
+    {
+        do
+        {
+            Field* fields=result->Fetch();
+            std::string report = fields[0].GetString();
+            
+            if (report.compare("Speed-Hack") == 0)
+                uiReportsAmount[0]++;
+            else if (report.compare("Fly-Hack") == 0)
+                uiReportsAmount[1]++;
+            else if (report.compare("WalkOnWater-Hack") == 0)
+                uiReportsAmount[2]++;
+        }
+        while (result->NextRow());
+    }
+
+    PSendSysMessage("Speed-Hack reports: %u || Fly-Hack reports: %u ||  WalkOnWater-Hack reports: %u", uiReportsAmount[0],uiReportsAmount[1],uiReportsAmount[2]);
+
+    return true;
+}
+
+bool ChatHandler::HandleAntiCheatHandleCommand(const char *args)
+{
+    std::string strCommand;
+
+    char* command = strtok((char*)args, " ");
+    
+    if (!command)
+        return true;
+
+    strCommand = command;
+
+    if (strCommand.compare("on") == 0)
+        sWorld.setBoolConfig(CONFIG_ANTICHEAT_ENABLE,true);
+    else if (strCommand.compare("off") == 0)
+        sWorld.setBoolConfig(CONFIG_ANTICHEAT_ENABLE,false);
+
+    return true;
+}
+
+bool ChatHandler::HandleAntiCheatGlobalCommand(const char *args)
+{
+    PreparedStatement* stmt = CharacterDatabase.GetPreparedStatement(CHAR_ANTICHEAT_GET_CHEATERS);
+    PreparedQueryResult result = CharacterDatabase.Query(stmt);
+
+    PSendSysMessage("Cheaters by Amount: -------------");
+    if (result)
+    {
+        do
+        {
+            Field* fields=result->Fetch();
+            std::string name = fields[0].GetCString();
+            uint32 warnings = fields[1].GetUInt32();
+
+            PSendSysMessage("Name: %s Warnings: %u", name.c_str(), warnings);
+        }
+        while (result->NextRow());
+    } else
+        PSendSysMessage("Cheaters amount log empty!.");
+
+    PSendSysMessage("Cheaters by Average: -------------");
+
+    stmt = CharacterDatabase.GetPreparedStatement(CHAR_ANTICHEAT_GET_CHEATERS_AVERAGE);
+    result = CharacterDatabase.Query(stmt);
+
+    if (result)
+    {
+        do
+        {
+            Field* fields=result->Fetch();
+            std::string name = fields[0].GetCString();
+            uint32 average = fields[1].GetUInt32();
+            uint32 warnings = fields[2].GetUInt32();
+
+            PSendSysMessage("Name: %s  Average: %u Warnings: %u", name.c_str(), average, warnings);
+        }
+        while (result->NextRow());
+    } else
+        PSendSysMessage("Cheaters average log empty!.");
+
+    return true;
+}
+
 bool ChatHandler::HandleFreezeCommand(const char *args)
 {
     std::string name;
diff -r 5178845b32a8 src/server/game/Entities/Player/Player.cpp
--- a/src/server/game/Entities/Player/Player.cpp	Wed Nov 17 23:24:21 2010 +0100
+++ b/src/server/game/Entities/Player/Player.cpp	Wed Nov 17 20:47:19 2010 -0300
@@ -617,6 +617,10 @@
 
 Player::~Player ()
 {
+    // anticheat
+    if (sWorld.getBoolConfig(CONFIG_ANTICHEAT_ENABLE))
+        CleanTempCheatReports();
+
     // it must be unloaded already in PlayerLogout and accessed only for loggined player
     //m_social = NULL;
 
@@ -652,6 +656,117 @@
     sWorld.DecreasePlayerCount();
 }
 
+bool Player::HasFirstReport()
+{
+    PreparedStatement* stmt = CharacterDatabase.GetPreparedStatement(CHAR_ANTICHEAT_GET_CHEAT_FIRST_REPORT);
+    stmt->setUInt64(0,GetGUIDLow());
+
+    PreparedQueryResult result = CharacterDatabase.Query(stmt);
+
+    if (result)
+        return true;
+    else 
+        return false;
+}
+
+void Player::CleanTempCheatReports()
+{
+    for (uint8 uiI = 0; uiI < 2; uiI++)
+    {
+        PreparedStatement* stmt;
+
+        if (uiI == 0)
+            stmt = CharacterDatabase.GetPreparedStatement(CHAR_ANTICHEAT_DEL_CHEAT_FIRST_REPORT);
+        else 
+            stmt = CharacterDatabase.GetPreparedStatement(CHAR_ANTICHEAT_DEL_CHEATERS_TEMP); 
+
+        stmt->setUInt64(0,GetGUIDLow());
+        CharacterDatabase.Execute(stmt);
+    }
+}
+
+void Player::ElaborateCheatReport(Player* pPlayer, uint8 uiCheatType)
+{
+    if (!pPlayer)
+        return;
+
+    // cheatType 1 == SpeedHack
+    // cheatType 2 == FlyHack
+    // cheatType 3 == WalkOnWaterHack
+
+    std::string strReportType;
+
+    switch(uiCheatType)
+    {
+    case 1:
+        strReportType = "Speed-Hack";
+        break;
+    case 2:
+        strReportType = "Fly-Hack"; 
+        break;
+    case 3:
+        strReportType = "WalkOnWater-Hack";
+        break;
+    default:
+        strReportType = "";
+        break;
+    }
+
+    if (!HasFirstReport())
+    {
+        PreparedStatement* stmt = CharacterDatabase.GetPreparedStatement(CHAR_ANTICHEAT_SET_CHEAT_FIRST_REPORT);
+        stmt->setUInt64(0,GetGUIDLow());
+        stmt->setString(1,GetName());
+        stmt->setUInt64(2, uint64(time(NULL)));
+        CharacterDatabase.Execute(stmt);
+    }
+    
+    for (uint8 uiI = 0; uiI < 2; uiI++)
+    {
+        PreparedStatement* stmt;
+
+        if (uiI == 0)
+            stmt = CharacterDatabase.GetPreparedStatement(CHAR_ANTICHEAT_SET_CHEATERS);
+        else 
+            stmt = CharacterDatabase.GetPreparedStatement(CHAR_ANTICHEAT_SET_CHEATERS_TEMP);
+
+        stmt->setUInt64(0,GetGUIDLow());
+        stmt->setString(1,GetName());
+        stmt->setUInt32(2,GetMapId());
+        stmt->setFloat(3,GetPositionX());
+        stmt->setFloat(4,GetPositionY());
+        stmt->setFloat(5,GetPositionZ());
+        stmt->setString(6,strReportType);
+        stmt->setUInt64(7, uint64(time(NULL)));
+        CharacterDatabase.Execute(stmt);
+    }
+
+    PreparedStatement* stmt = CharacterDatabase.GetPreparedStatement(CHAR_ANTICHEAT_GET_CHEATERS_BY_GUID);
+    stmt->setUInt32(0,this->GetGUIDLow());
+    PreparedQueryResult result = CharacterDatabase.Query(stmt);
+    uint32 warnings = 0;
+    if (result)
+    {
+        do
+        {
+            Field* fields=result->Fetch();
+            warnings = fields[0].GetUInt32();
+        }
+        while (result->NextRow());
+    }
+
+    if (warnings > sWorld.getIntConfig(CONFIG_ANTICHEAT_REPORTS_FOR_GM_WARNING) && 
+        sWorld.getIntConfig(CONFIG_ANTICHEAT_REPORTS_FOR_GM_WARNING) >= 0)
+    {
+        // display warning at the center of the screen, hacky way.
+        std::string str = "";
+        str = "|cFFFFFC00[AC]|cFF00FFFF[|cFF60FF00" + std::string(pPlayer->GetName()) + "|cFF00FFFF] Possible cheater!";
+        WorldPacket data(SMSG_NOTIFICATION, (str.size()+1));
+        data << str;
+        sWorld.SendGlobalGMMessage(&data);
+    }
+}
+
 void Player::CleanupsBeforeDelete(bool finalCleanup)
 {
     TradeCancel(false);
@@ -20001,6 +20116,24 @@
     }
 }
 
+bool Player::CanFlyAnticheat(MovementInfo& pMovementInfo)
+{
+    if (IsUnderWater())
+        return true;
+
+    if (HasAuraType(SPELL_AURA_FLY) || HasAuraType(SPELL_AURA_WATER_WALK) || HasAuraType(SPELL_AURA_MOD_INCREASE_MOUNTED_FLIGHT_SPEED) || HasAuraType(SPELL_AURA_MOD_INCREASE_FLIGHT_SPEED))
+        return true;
+
+    if (Creature* pCreature = GetVehicleCreatureBase())
+        if (pCreature->GetCreatureInfo()->InhabitType & INHABIT_AIR)
+            return true;
+
+    if (HasUnitMovementFlag(MOVEMENTFLAG_JUMPING) ||  pMovementInfo.HasMovementFlag(MOVEMENTFLAG_JUMPING) || GetMap()->GetGameObject(pMovementInfo.t_guid))
+        return true;
+
+    return false;
+}
+
 void Player::UpdatePvPState(bool onlyFFA)
 {
     // TODO: should we always synchronize UNIT_FIELD_BYTES_2, 1 of controller and controlled?
diff -r 5178845b32a8 src/server/game/Entities/Player/Player.h
--- a/src/server/game/Entities/Player/Player.h	Wed Nov 17 23:24:21 2010 +0100
+++ b/src/server/game/Entities/Player/Player.h	Wed Nov 17 20:47:19 2010 -0300
@@ -2380,6 +2380,19 @@
         float GetAverageItemLevel();
         bool isDebugAreaTriggers;
 
+        /*********************************************************/
+        /***                 ANTICHEAT SYSTEM                  ***/
+        /*********************************************************/
+        uint32 GetLastPacketTime() { return uiLastPacketTime;}
+        uint32 GetLastOpcode() { return uiLastOpcode; }
+        float GetLastSpeedRate() { return fLastSpeedRate; }
+        void SetLastPacketTime(uint32 uiTime) { uiLastPacketTime = uiTime; }
+        void SetLastSpeedRate(float fSpeedRateRate) { fLastSpeedRate = fSpeedRateRate; }
+        void SetLastOpcode(uint32 uiOpcode) { uiLastOpcode = uiOpcode; }
+        void ElaborateCheatReport(Player* pPlayer, uint8 uiReportType);
+        bool CanFlyAnticheat(MovementInfo& pMovementInfo);
+        bool HasFirstReport();
+        void CleanTempCheatReports();
     protected:
         uint32 m_AreaID;
         uint32 m_regenTimerCount;
@@ -2625,6 +2638,13 @@
 
         bool isAlwaysDetectableFor(WorldObject const* seer) const;      
     private:
+        /*********************************************************/
+        /***                    ANTICHEAT SYSTEM               ***/
+        /*********************************************************/
+        uint32  uiLastPacketTime;
+        float fLastSpeedRate;
+        uint32 uiLastOpcode;
+
         // internal common parts for CanStore/StoreItem functions
         uint8 _CanStoreItem_InSpecificSlot(uint8 bag, uint8 slot, ItemPosCountVec& dest, ItemPrototype const *pProto, uint32& count, bool swap, Item *pSrcItem) const;
         uint8 _CanStoreItem_InBag(uint8 bag, ItemPosCountVec& dest, ItemPrototype const *pProto, uint32& count, bool merge, bool non_specialized, Item *pSrcItem, uint8 skip_bag, uint8 skip_slot) const;
diff -r 5178845b32a8 src/server/game/Server/Protocol/Handlers/MovementHandler.cpp
--- a/src/server/game/Server/Protocol/Handlers/MovementHandler.cpp	Wed Nov 17 23:24:21 2010 +0100
+++ b/src/server/game/Server/Protocol/Handlers/MovementHandler.cpp	Wed Nov 17 20:47:19 2010 -0300
@@ -31,6 +31,7 @@
 #include "WaypointMovementGenerator.h"
 #include "InstanceSaveMgr.h"
 #include "ObjectMgr.h"
+#include "VMapFactory.h"
 
 void WorldSession::HandleMoveWorldportAckOpcode(WorldPacket & /*recv_data*/)
 {
@@ -340,6 +341,137 @@
     }
 
     /*----------------------*/
+    
+    // ANTICHEAT CHECKS
+    if (sWorld.getBoolConfig(CONFIG_ANTICHEAT_ENABLE))
+    {
+        /* Hack Detection doesn't work if:
+        *  player is in flight/transport
+        *  player is teleporting
+        *  when can't free move
+        */
+
+        if (plMover && 
+            !plMover->isInFlight() && 
+            !plMover->GetTransport() &&
+            !plMover->IsBeingTeleported() &&
+            plMover->CanFreeMove() &&
+            !plMover->isGameMaster())
+        {
+            // fly hack detection
+            // PosZ is checked to see if the player is going up when it should not.
+            // we need a better way :(         
+            if (!plMover->CanFlyAnticheat(movementInfo))
+            {
+                if (movementInfo.pos.GetPositionZ() > plMover->GetPositionZ() && fabs(movementInfo.pos.GetPositionZ() - plMover->GetPositionZ()) > 1.5f)
+                {
+                    float ground_Z = plMover->GetMap()->GetHeight(movementInfo.pos.GetPositionX(), movementInfo.pos.GetPositionY(), movementInfo.pos.GetPositionZ());
+                    if (movementInfo.pos.GetPositionZ() > ground_Z && fabs(movementInfo.pos.GetPositionZ() - ground_Z) >= 5.0f)
+                        plMover->ElaborateCheatReport(plMover,2);
+                }
+            }
+
+            // speed hack detection
+            if (plMover->GetLastPacketTime() > 0 && 
+                movementInfo.GetMovementFlags() == plMover->GetUnitMovementFlags() &&
+                opcode == MSG_MOVE_HEARTBEAT && 
+                plMover->GetLastOpcode() == opcode &&
+                !plMover->GetVehicle() && 
+                plMover->GetMotionMaster()->GetCurrentMovementGeneratorType() != TARGETED_MOTION_TYPE)
+            {
+                uint8 uiMoveType = 0;
+
+                if (plMover->IsFlying())
+                    uiMoveType = MOVE_FLIGHT;
+                else if (plMover->IsUnderWater())
+                    uiMoveType = MOVE_SWIM;
+                else 
+                    uiMoveType = MOVE_RUN;
+
+                // this is the distance doable by a player in 1000 ms.
+                float fSpeedRate = plMover->GetSpeedRate(UnitMoveType(uiMoveType));
+
+                // in my opinion this var must be constant in each check to avoid false reports
+                if (plMover->GetLastSpeedRate() == fSpeedRate)
+                {
+                    // Calculate Distance2D
+                    float fDeltaX = pow((movementInfo.pos.GetPositionX() - plMover->GetPositionX()),2);
+                    float fDeltaY = pow(movementInfo.pos.GetPositionY() - plMover->GetPositionY(),2);
+                    // final distance
+                    float fDistance2d = fabs(sqrt(fDeltaX + fDeltaY) - plMover->GetObjectSize() - plMover->GetObjectSize());
+
+                    // time between packets
+                    uint32 uiDiffTime =  getMSTimeDiff(plMover->GetLastPacketTime(), movementInfo.time);
+                    
+                    // this is the distance doable by the player in 1 sec using the time between the packets
+                    float fCoreDistance = uiDiffTime * 7.0f * fSpeedRate / 1000;
+
+                    /* SPEED HACK DETECTION */
+                    if (uiDiffTime < sWorld.getIntConfig(CONFIG_ANTICHEAT_MAX_DIFF_TIME) && uiDiffTime > sWorld.getIntConfig(CONFIG_ANTICHEAT_MIN_DIFF_TIME))
+                    {
+                        // some times (i dont know why) fCoreDistance is 0 
+                        if (fCoreDistance > 0.0f && fDistance2d > 0)
+                        {
+                            if (fDistance2d > fCoreDistance)
+                            {
+                                if (fabs(fCoreDistance - fDistance2d) > sWorld.getFloatConfig(CONFIG_ANTICHEAT_MAX_DISTANCE_DIFF_ALLOWED))
+                                {
+                                    sLog.outError("Cheater! guid %u name %s fCoreDistance %f fDistance2d %f uiDiffTime %u fSpeedRate %f Latency %u",plMover->GetGUIDLow(),plMover->GetName(),fCoreDistance,fDistance2d,uiDiffTime,fSpeedRate, plMover->GetSession()->GetLatency());
+                                    plMover->ElaborateCheatReport(plMover,1);
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+
+            // just to prevent false reports when we switch (off/on) for example the aura or something.
+            if (movementInfo.GetMovementFlags() == plMover->GetUnitMovementFlags() && 
+                plMover->isAlive() &&
+                !plMover->isInFlight() &&
+                !plMover->GetVehicle() &&
+                !plMover->GetMap()->GetGameObject(movementInfo.t_guid))
+            {
+                // walk on water hack detection
+                // AFAIK the player can only do this if has some aura that allows it... 
+                if (!plMover->HasAuraType(SPELL_AURA_WATER_WALK) &&
+                    !plMover->HasAuraType(SPELL_AURA_FEATHER_FALL) &&
+                    plMover->HasUnitMovementFlag(MOVEMENTFLAG_WATERWALKING) && 
+                    !plMover->IsFlying())
+                {
+                    sLog.outError("Cheater! WaterWalking guid %u name %s Latency %u",plMover->GetGUIDLow(),plMover->GetName(), plMover->GetSession()->GetLatency());
+                    plMover->ElaborateCheatReport(plMover,3);
+                }
+
+                // fly hack detection
+                // AFAIK the player can only do this if has some aura that allows it... 
+                if (plMover->IsFlying() &&
+                    !plMover->HasAuraType(SPELL_AURA_FLY) &&
+                    !plMover->HasAuraType(SPELL_AURA_MOD_INCREASE_MOUNTED_FLIGHT_SPEED))
+                {
+                    sLog.outError("Cheater! Fly guid %u name %s Latency %u",plMover->GetGUIDLow(),plMover->GetName(), plMover->GetSession()->GetLatency());
+                    plMover->ElaborateCheatReport(plMover,2);
+                }
+            }
+        }
+
+        // save packet time for next control.
+        if (plMover)
+        {
+            uint8 uiMoveType = 0;
+
+            if (plMover->IsFlying())
+                uiMoveType = MOVE_FLIGHT;
+            else if (plMover->IsUnderWater())
+                uiMoveType = MOVE_SWIM;
+            else 
+                uiMoveType = MOVE_RUN;
+
+            plMover->SetLastPacketTime(movementInfo.time);
+            plMover->SetLastSpeedRate(plMover->GetSpeedRate(UnitMoveType(uiMoveType)));
+            plMover->SetLastOpcode(opcode);
+        }
+    }
 
     /* process position-change */
     WorldPacket data(opcode, recv_data.size());
diff -r 5178845b32a8 src/server/game/World/World.cpp
--- a/src/server/game/World/World.cpp	Wed Nov 17 23:24:21 2010 +0100
+++ b/src/server/game/World/World.cpp	Wed Nov 17 20:47:19 2010 -0300
@@ -1181,6 +1181,13 @@
     // MySQL ping time interval
     m_int_configs[CONFIG_DB_PING_INTERVAL] = sConfig.GetIntDefault("MaxPingTime", 1800);
 
+    // anticheat configs
+    m_bool_configs[CONFIG_ANTICHEAT_ENABLE] = sConfig.GetBoolDefault("Anticheat.Enable", false);
+ 	m_int_configs[CONFIG_ANTICHEAT_MAX_DIFF_TIME] = sConfig.GetIntDefault("Anticheat.MaxDiffTime", 1000);
+ 	m_int_configs[CONFIG_ANTICHEAT_MIN_DIFF_TIME] = sConfig.GetIntDefault("Anticheat.MinDiffTime", 50);
+    m_int_configs[CONFIG_ANTICHEAT_REPORTS_FOR_GM_WARNING] = sConfig.GetIntDefault("Anticheat.ReportsForGMWarning",75);
+    m_float_configs[CONFIG_ANTICHEAT_MAX_DISTANCE_DIFF_ALLOWED] = sConfig.GetFloatDefault("Anticheat.MaxMaxAllowedDistance",1.0f);
+
     sScriptMgr.OnConfigLoad(reload);
 }
 
@@ -2659,6 +2666,10 @@
         if (itr->second->GetPlayer())
             itr->second->GetPlayer()->ResetDailyQuestStatus();
 
+    //ANTICHEAT
+    CharacterDatabase.Execute("DELETE FROM cheat_reports;");
+    CharacterDatabase.Execute("DELETE FROM cheat_first_report;");
+
     // change available dailies
     sPoolMgr.ChangeDailyQuests();
 }
diff -r 5178845b32a8 src/server/game/World/World.h
--- a/src/server/game/World/World.h	Wed Nov 17 23:24:21 2010 +0100
+++ b/src/server/game/World/World.h	Wed Nov 17 20:47:19 2010 -0300
@@ -162,6 +162,7 @@
     CONFIG_DUNGEON_FINDER_ENABLE,
     CONFIG_AUTOBROADCAST,
     CONFIG_ALLOW_TICKETS,
+    CONFIG_ANTICHEAT_ENABLE,
     BOOL_CONFIG_VALUE_COUNT
 };
 
@@ -178,6 +179,7 @@
     CONFIG_CREATURE_FAMILY_ASSISTANCE_RADIUS,
     CONFIG_THREAT_RADIUS,
     CONFIG_CHANCE_OF_GM_SURVEY,
+    CONFIG_ANTICHEAT_MAX_DISTANCE_DIFF_ALLOWED,
     FLOAT_CONFIG_VALUE_COUNT
 };
 
@@ -307,6 +309,9 @@
     CONFIG_AUTOBROADCAST_INTERVAL,
     CONFIG_MAX_RESULTS_LOOKUP_COMMANDS,
     CONFIG_DB_PING_INTERVAL,
+    CONFIG_ANTICHEAT_MAX_DIFF_TIME,
+ 	CONFIG_ANTICHEAT_MIN_DIFF_TIME,
+    CONFIG_ANTICHEAT_REPORTS_FOR_GM_WARNING,
     INT_CONFIG_VALUE_COUNT
 };
 
diff -r 5178845b32a8 src/server/shared/Database/Implementation/CharacterDatabase.cpp
--- a/src/server/shared/Database/Implementation/CharacterDatabase.cpp	Wed Nov 17 23:24:21 2010 +0100
+++ b/src/server/shared/Database/Implementation/CharacterDatabase.cpp	Wed Nov 17 20:47:19 2010 -0300
@@ -211,5 +211,22 @@
     PrepareStatement(CHAR_CLEAN_GUILD_BANK_TABS, "DELETE FROM guild_bank_tab WHERE guildId NOT IN (SELECT guildid FROM guild)");
     PrepareStatement(CHAR_CLEAN_GUILD_BANK_RIGHTS, "DELETE FROM guild_bank_right WHERE guildId NOT IN (SELECT guildid FROM guild)");
     PrepareStatement(CHAR_CLEAN_GUILD_BANK_ITEMS, "DELETE FROM guild_bank_item WHERE guildId NOT IN (SELECT guildid FROM guild)");
+
+    PrepareStatement(CHAR_ANTICHEAT_SET_CHEATERS, "INSERT INTO cheat_reports (`guid`,`name`,`mapid`,`position_x`,`position_y`,`position_z`,`report`,`time`) VALUES (?,?,?,?,?,?,?,?);");
+    PrepareStatement(CHAR_ANTICHEAT_SET_CHEATERS_TEMP, "INSERT INTO cheat_temp_reports (`guid`,`name`,`mapid`,`position_x`,`position_y`,`position_z`,`report`,`time`) VALUES (?,?,?,?,?,?,?,?);");
+    PrepareStatement(CHAR_ANTICHEAT_GET_CHEATERS, "SELECT A.`name` , count( * ) AS 'Repeticiones' FROM `characters` AS A, `cheat_reports` AS B WHERE A.`online` =1 AND A.`guid` = B.`guid` GROUP BY B.`guid` ORDER BY Repeticiones DESC LIMIT 0 , 3");
+    PrepareStatement(CHAR_ANTICHEAT_SET_CHEAT_FIRST_REPORT, "INSERT INTO cheat_first_report (`guid`,`name`,`time`) VALUES (?,?,?);");
+    PrepareStatement(CHAR_ANTICHEAT_GET_CHEATERS_AVERAGE, "SELECT A.`name` , CAST((SUM(B.time ) / count( * ) ) - C.time AS UNSIGNED) AS 'promedio' , CAST(count( * ) AS UNSIGNED) AS 'Repeticiones' FROM `characters` AS A, `cheat_temp_reports` AS B, cheat_first_report AS C WHERE A.`online` =1 AND A.`guid` = B.`guid` AND A.guid = C.guid GROUP BY B.`guid` ORDER BY Repeticiones  DESC LIMIT 0 , 3;");
+    PrepareStatement(CHAR_ANTICHEAT_GET_CHEAT_FIRST_REPORT, "SELECT * FROM cheat_first_report WHERE guid=?;");
+    PrepareStatement(CHAR_ANTICHEAT_DEL_CHEAT_FIRST_REPORT, "DELETE FROM cheat_first_report WHERE guid=?");
+    PrepareStatement(CHAR_ANTICHEAT_DEL_CHEATERS_TEMP, "DELETE FROM cheat_temp_reports WHERE guid=?");
+    PrepareStatement(CHAR_ANTICHEAT_DEL_CHEATERS, "DELETE FROM cheat_reports WHERE guid=?");
+    PrepareStatement(CHAR_ANTICHEAT_CLEAN_CHEAT_FIRST_REPORT, "DELETE FROM cheat_first_report;");
+    PrepareStatement(CHAR_ANTICHEAT_CLEAN_CHEATERS_TEMP, "DELETE FROM cheat_temp_reports");
+    PrepareStatement(CHAR_ANTICHEAT_CLEAN_CHEATERS, "DELETE FROM cheat_reports;");
+
+    PrepareStatement(CHAR_ANTICHEAT_GET_CHEATERS_AVERAGE_BY_GUID,"SELECT CAST((SUM(B.time ) / count( * ) ) - C.time AS UNSIGNED) AS 'promedio' , CAST(count( * ) AS UNSIGNED) AS 'Repeticiones' FROM `characters` AS A, `cheat_temp_reports` AS B, cheat_first_report AS C WHERE A.`online` =1 AND A.`guid` = B.`guid` AND A.guid = C.guid AND A.`guid`=? GROUP BY B.`guid` ORDER BY Repeticiones  DESC LIMIT 0 , 1;");
+    PrepareStatement(CHAR_ANTICHEAT_GET_CHEATERS_BY_GUID,"SELECT count( * ) AS 'Repeticiones' FROM `characters` AS A, `cheat_reports` AS B WHERE A.`online` =1 AND A.`guid` = B.`guid` AND A.`guid`=? GROUP BY B.`guid` ORDER BY Repeticiones DESC LIMIT 0 , 1");
+    PrepareStatement(CHAR_ANTICHEAT_GET_REPORTS_TYPE_BY_GUID,"SELECT report FROM cheat_reports WHERE guid=?;");
     return true;
 }
diff -r 5178845b32a8 src/server/shared/Database/Implementation/CharacterDatabase.h
--- a/src/server/shared/Database/Implementation/CharacterDatabase.h	Wed Nov 17 23:24:21 2010 +0100
+++ b/src/server/shared/Database/Implementation/CharacterDatabase.h	Wed Nov 17 20:47:19 2010 -0300
@@ -177,6 +177,25 @@
     CHAR_CLEAN_GUILD_BANK_RIGHTS,
     CHAR_CLEAN_GUILD_BANK_ITEMS,
 
+    CHAR_ANTICHEAT_SET_CHEATERS,
+    CHAR_ANTICHEAT_GET_CHEATERS,
+
+    CHAR_ANTICHEAT_SET_CHEAT_FIRST_REPORT,
+    CHAR_ANTICHEAT_GET_CHEAT_FIRST_REPORT,
+    CHAR_ANTICHEAT_GET_CHEATERS_AVERAGE,
+    CHAR_ANTICHEAT_DEL_CHEAT_FIRST_REPORT,
+    CHAR_ANTICHEAT_SET_CHEATERS_TEMP,
+    CHAR_ANTICHEAT_DEL_CHEATERS_TEMP,
+    CHAR_ANTICHEAT_DEL_CHEATERS,
+
+    CHAR_ANTICHEAT_CLEAN_CHEAT_FIRST_REPORT,
+    CHAR_ANTICHEAT_CLEAN_CHEATERS_TEMP,
+    CHAR_ANTICHEAT_CLEAN_CHEATERS,
+
+    CHAR_ANTICHEAT_GET_CHEATERS_AVERAGE_BY_GUID,
+    CHAR_ANTICHEAT_GET_CHEATERS_BY_GUID,
+    CHAR_ANTICHEAT_GET_REPORTS_TYPE_BY_GUID,
+
     MAX_CHARACTERDATABASE_STATEMENTS,
 };
 
diff -r 5178845b32a8 src/server/worldserver/worldserver.conf.dist
--- a/src/server/worldserver/worldserver.conf.dist	Wed Nov 17 23:24:21 2010 +0100
+++ b/src/server/worldserver/worldserver.conf.dist	Wed Nov 17 20:47:19 2010 -0300
@@ -2043,6 +2043,19 @@
 #        Default: 0 - off
 #                 1 - on
 #
+#   Anticheat.Enable
+#        Enable Anticheat System
+#        Default: 0 - off
+#                 1 - on
+#   Anticheat.MaxDiffTime
+#        Default: 1000 ms
+#   Anticheat.MinDiffTime
+#        Default: 350 ms
+#   Anticheat.MaxMaxAllowedDistance
+#	    Default: 1.0 f
+#   Anticheat.ReportsForGMWarnings
+#	    Enable and set warnings (at which amount will allow the report) for ingame-report, -1 disables it
+#	    Default: 75
 ###############################################################################
 
 PlayerStart.AllReputation = 0
@@ -2066,3 +2079,8 @@
 LevelReq.Auction = 1
 LevelReq.Mail = 1
 DungeonFinder.Enable = 0
+Anticheat.Enable = 0
+Anticheat.MaxDiffTime = 1000
+Anticheat.MinDiffTime = 50
+Anticheat.MaxMaxAllowedDistance = 1.0
+Anticheat.ReportsForGMWarnings = 75
\ No newline at end of file
